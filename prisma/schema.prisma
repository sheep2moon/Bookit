// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Service {
    id                   String    @id @default(cuid())
    name                 String
    slug                 String    @unique
    ownerId              String    @unique
    owner                User      @relation(fields: [ownerId], references: [id])
    description          String    @db.Text
    email                String?
    phoneNumber          Int?
    instagramId          String?
    facebookId           String?
    twitterId            String?
    isActive             Boolean
    autoBookingAccept    Boolean
    serviceImageId       String?
    serviceImage         Image?    @relation(fields: [serviceImageId], references: [id])
    serviceTitle         String?
    bookings             Booking[]
    openSlots            Slot[]
    clientNumberRequired Boolean   @default(false)

    createdAt DateTime @default(now())
}

model Slot {
    id        String   @id @default(cuid())
    isFree    Boolean
    date      DateTime
    serviceId String
    service   Service  @relation(fields: [serviceId], references: [id])
}

model Booking {
    id                      String   @id @default(cuid())
    service                 Service  @relation(fields: [serviceId], references: [id])
    clientContactNumber     Int?
    clientAdditionalContact String
    clientInformation       String   @db.Text
    date                    DateTime
    addedAt                 DateTime @default(now())
    serviceId               String
}

model Image {
    id String @id @default(cuid())

    Service Service[]
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Service       Service?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
